package dev.duttech.card.game.poker;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import dev.duttech.card.Card;

public class PokerHand {
	
	private List<Card> hand;
	private List<Card> keepers;
	private List<Card> discards;
	private Ranking score = Ranking.NONE;
	private int playerNo;
	
	public PokerHand(int playerNo, List<Card>hand) {
		hand.sort(Card.sortRankReversedSuit());
		this.playerNo = playerNo;
		this.hand = hand;
		this.keepers = new ArrayList<>(hand.size());
		this.discards = new ArrayList<>(hand.size());
	}
	
	public void setRank(int faceCount) {
		switch(faceCount) {
			case 4 -> score = Ranking.FOUR_OF_A_KIND;
			case 3 -> {
				if(score == Ranking.NONE) score = Ranking.THREE_OF_A_KIND;
				else score = Ranking.FULL_HOUSE;
			}
			case 2 -> {
				if(score == Ranking.NONE) score = Ranking.ONE_PAIR;
				else if(score == Ranking.THREE_OF_A_KIND) score = Ranking.FULL_HOUSE;
				else score = Ranking.TWO_PAIR;
			}
		}
	}
	
	public void evalHand() {
		List<Card> faceList = new ArrayList<>(hand.size());
		hand.forEach(card -> faceList.add(card));
		List<Card> duplicateCards = new ArrayList<>();
		
		faceList.forEach(face -> {
			if(duplicateCards.contains(face) && Collections.frequency(faceList, face) >1) {
				duplicateCards.add(face);
			}
		});
		
		for(Card duplicateCard: duplicateCards) {
			int startIdx = duplicateCards.indexOf(duplicateCard);
			int lastIdx = duplicateCards.lastIndexOf(duplicateCard);
			int rank = (lastIdx-startIdx+1);
			setRank(rank);
		}
	}
	

	@Override
    public String toString() {
        return "%d. %-16s Rank:%d %-40s Best:%-7s Worst:%-6s %s".formatted(
                playerNo, score, score.ordinal(), hand,
                Collections.max(hand, Comparator.comparing(Card::rank)),
                Collections.min(hand, Comparator.comparing(Card::rank)),
                (discards.size() > 0) ? "Discards:" + discards : "");
    }
	
	
	

}
